@layout LoginLayout

@page "/login"

<link href="/css/Logincss.css" rel="stylesheet" />

<div class="container">
    <div class="row  px-3">
        <div class="col-lg-10 col-xl-9 card flex-row mx-auto px-0">
            <div class="img-left d-none d-md-flex">

            </div>
            <div class="card-body">
                <h4 class="title text-center mt-4">Bienvenido</h4>

                <h4 class="title text-center mb-2">Iniciar Sesión</h4>

                <EditForm Model="Model" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator />
                    <div class="col-md-12 mb-3">
                        <label class="mb-2">Usuario</label>
                        <input type="text" placeholder="Escriba su nombre de usuario" class="form-control" @bind="Model.Usuario" />
                        <ValidationMessage For="(()=>Model.Usuario)" />
                    </div>


                    <div class="col-md-12 mb-3">
                        <label class="mb-2">Contraseña</label>
                        <input type="password" placeholder="Escriba la contraseña" class="form-control" @bind="Model.Password" />
                        <ValidationMessage For="(()=>Model.Password)" />
                    </div>


                    <div class="col-md-12 mb-3">
                        <div class="form-group form-check">
                            @*<input type="checkbox" class="form-check-input" id="exampleCheck1"
                                       @bind="Model.Recordar">
                                <label class="form-check-label" for="exampleCheck1">Mantener sesión abierta </label>*@
                        </div>

                    </div>

                    <div class="col-md-12 mb-3">
                        <button type="submit" class="btn btn-primary btn-block">Iniciar</button>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>


<ToastContainer />

@inject UsuariosService usuarioService
@inject LoginService loginService
@inject ILocalStorageService localStorage
@inject NavigationManager navigation
@inject IToaster toaster

@code { public LoginUsuarioModel Model { get; set; } = new LoginUsuarioModel();

            protected async Task LoginUser()
            {
                var res = loginService.Login(Model);

                if (!res.IsSuccess)
                {
                    toaster.Error(res.Message, "Error");
                }
                else
                {
                    navigation.NavigateTo("/", true);

                    var token = new LoginModel
                    {
                        Usuario = Model.Usuario,
                        Recordar = Model.Recordar,
                    };

                    await localStorage.SetItemAsync<LoginModel>("token", token);
                }
            } }
